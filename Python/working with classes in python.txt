class Facade:
  pass

facade_1 = Facade()

facade_1_type = type(facade_1)

print(facade_1_type)

# Final output:

<class '__main__.Facade'>

#### __main__. means "this current file we're running", so its like saying the type here is of the class .Facade that was defined here in this current file we're running. ###

# Class variables and Class Methods:

class Circle:
  pi = 3.14
  def area(self, radius):
    area = Circle.pi * radius ** 2
    return area

circle = Circle()

pizza_area = Circle().area(6)
teaching_table_area = Circle().area(18)
round_room_area = Circle().area(5730)

print(pizza_area)
print(teaching_table_area)
print(round_room_area)

# When defining a class method the minimum and first argument should be "self". When you call that method you don't need to pass an argument for self because it is implied #

### CONSTRUCTOR( "DUNDER") METHOD __init__() - this is called every time the class is instantiated:

class Circle:
  pi = 3.14
  
  # Add constructor here:
  def __init__(self, diameter):
    print("New circle with diameter: {}".format(diameter))

teaching_table = Circle(36)

###

# Giving instances of the same class a property with the same name but different value:

class Store:
  pass

alternative_rocks = Store()
isabelles_ices = Store()

alternative_rocks.store_name = "Alternative Rocks"
isabelles_ices.store_name = "Isabelle's Ices"

###

# Check for attribute with hasattr(object_to_check, "attribute"). Return the value of attribute with getattr() #

can_we_count_it = [{'s': False}, "sassafrass", 18, ["a", "c", "s", "d", "s"]]

for item in can_we_count_it:
  if (hasattr(item, "count")):
    print(str(type(item)) + " has the count attribute!")
  else:
    print(str(type(item)) + " does not have the count attribute :(")

###

class Circle:
  pi = 3.14
  def __init__(self, diameter):
    print("Creating circle with diameter {d}".format(d=diameter))
    # Add assignment for self.radius here:
    self.radius = diameter / 2
  def circumference(self):
    circumference = 2 * self.pi * self.radius
    return circumference

medium_pizza = Circle(12)
teaching_table = Circle(36)
round_room = Circle(11460)

print(medium_pizza.circumference())
print(teaching_table.circumference())
print(round_room.circumference())

# Here there is a class method called circumference. This makes use of 2 values from the class - not given arguments (pi and radius) - so we need to specify them as self.pi, i.e. coming from the class. We call the return value of this function for each instance with dot () notation #

# __repr__() sets what we want the string representation of the class to be, e.g.:

class Circle:
  pi = 3.14
  def __init__(self, diameter):
    self.radius = diameter / 2
  def __repr__(self):
    return "Circle with radius {radius}".format(radius=self.radius)
  def area(self):
    return self.pi * self.radius ** 2
  def circumference(self):
    return self.pi * 2 * self.radius
  
medium_pizza = Circle(12)
teaching_table = Circle(36)
round_room = Circle(11460)

print(medium_pizza)
print(teaching_table)
print(round_room)
 
# Final output:

Circle with radius 6.0
Circle with radius 18.0
Circle with radius 5730.0
